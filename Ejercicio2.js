// üìå Implementaci√≥n de la clase PilaLimitada con un tama√±o m√°ximo
class PilaLimitada {
    constructor(maxSize) {
        this.items = []; // Arreglo para almacenar los elementos de la pila
        this.maxSize = maxSize; // Tama√±o m√°ximo permitido
    }

    // M√©todo para agregar un elemento a la pila (PUSH)
    push(elemento) {
        if (this.items.length >= this.maxSize) {
            console.log("Error: La pila est√° llena");
            return;
        }
        this.items.push(elemento);
    }

    // M√©todo para eliminar y retornar el √∫ltimo elemento de la pila (POP)
    pop() {
        if (this.isEmpty()) {
            console.log("Error: La pila est√° vac√≠a");
            return null;
        }
        return this.items.pop();
    }

    // M√©todo para ver el √∫ltimo elemento de la pila sin eliminarlo (PEEK)
    peek() {
        if (this.isEmpty()) {
            console.log("Error: La pila est√° vac√≠a");
            return null;
        }
        return this.items[this.items.length - 1];
    }

    // M√©todo para verificar si la pila est√° vac√≠a
    isEmpty() {
        return this.items.length === 0;
    }

    // M√©todo para verificar si la pila est√° llena
    isFull() {
        return this.items.length >= this.maxSize;
    }

    // M√©todo para obtener el tama√±o actual de la pila
    size() {
        return this.items.length;
    }

    // M√©todo para mostrar el estado actual de la pila
    print() {
        console.log("Pila:", this.items);
    }
}

// üìå Prueba de la clase PilaLimitada
let miPila = new PilaLimitada(3); // Definimos una pila con l√≠mite de 3 elementos

miPila.push("A");
miPila.push("B");
miPila.push("C");

miPila.print(); // Mostrar√°: Pila: [ 'A', 'B', 'C' ]

// Intentamos agregar otro elemento cuando ya est√° llena
miPila.push("D"); // Mostrar√°: Error: La pila est√° llena

// Sacamos un elemento y volvemos a intentar agregar "D"
miPila.pop();
miPila.push("D");

miPila.print(); // Mostrar√°: Pila: [ 'A', 'B', 'D' ]
